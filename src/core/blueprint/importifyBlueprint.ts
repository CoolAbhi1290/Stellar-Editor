import generateId from 'core/part/generateId';
import partImportify from 'core/part/partImportify';
import { Blueprint, blueprintData, VanillaBlueprint } from 'game/Blueprint';
import { cloneDeep, isArray } from 'lodash';

export const WATERMARK_KEY = 'Generated by Stellar';
export const WATERMARK_VALUE = `${window.location.origin}/`;

type AnyBlueprint = VanillaBlueprint | Blueprint;
type AnyBlueprintWithWatermark = AnyBlueprint &
Record<typeof WATERMARK_KEY, string | undefined>;

export const importifyBlueprint = (importedBlueprint: AnyBlueprint) => {
  const newBlueprint = cloneDeep(blueprintData);

  // STEP 1: Remove watermark
  delete (newBlueprint as AnyBlueprintWithWatermark)[WATERMARK_KEY];

  // STEP 2: Copy all properties
  newBlueprint.center = importedBlueprint.center;
  newBlueprint.offset = importedBlueprint.offset;
  newBlueprint.selections = (importedBlueprint as Blueprint).selections ?? [];
  newBlueprint.stages = importedBlueprint.stages;

  // STEP 3: Importify all parts
  if (isArray(importedBlueprint.parts)) {
    // vanilla blueprint
    (importedBlueprint as VanillaBlueprint).parts.forEach((vanillaPart) => {
      const id = generateId(newBlueprint.parts);
      const importifiedPart = partImportify(vanillaPart, id);

      if (importifiedPart) {
        newBlueprint.parts[id] = importifiedPart;
        newBlueprint.part_order.push(id);
      }
    });
  } else {
    Object.keys(importedBlueprint.parts).forEach((id) => {
      const importifiedPart = partImportify(
        (importedBlueprint as Blueprint).parts[id],
        id,
      );
      if (importifiedPart) newBlueprint.parts[id] = importifiedPart;
    });

    newBlueprint.part_order = (importedBlueprint as Blueprint).part_order;
  }

  return newBlueprint;
};
