selections.forEach((selection) => {
    const part = getPart(selection);

    if (part) {
      if (selectionsByPartNames.has(part.n)) {
        selectionsByPartNames.get(part.n)?.push(selection);
      } else {
        selectionsByPartNames.set(part.n, [selection]);
      }
    }
  });
  let partsWithTransformations: PartIDs = [];
  let selectedPartNames: AnyPartName[] = Array.from(
    selectionsByPartNames.keys(),
  ).sort();
  let propertyItems: JSX.Element[] = [];
  selectedPartNames.forEach((partName) => {
    const IDs = selectionsByPartNames.get(partName)!;
    const partClass = getPartClass(partName);

    if (partClass.hasTransformations) partsWithTransformations.push(...IDs);

    if (partClass.PropertyComponent)
      propertyItems.push(
        <partClass.PropertyComponent key={`type-${partName}`} IDs={IDs} />,
      );
  });

  if (partsWithTransformations.length > 0) {
    propertyItems.unshift(
      <TransformationProperties
        key="type-transformations"
        IDs={partsWithTransformations}
      />,
    );
  }